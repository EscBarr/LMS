// <auto-generated />
using System;
using LMS.EntityСontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LMS.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_enum", new[] { "student", "teacher", "admin" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<int>("CoursesCourseId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesCourseId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("LMS.EntityContext.ChatMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedVariantId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedVariantId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("LMS.EntityСontext.AssignedVariant", b =>
                {
                    b.Property<int>("AssignedVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssignedVariantId"));

                    b.Property<DateTime>("AssignDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CompletionDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DueDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<int>("RepoID")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VariantId")
                        .HasColumnType("integer");

                    b.HasKey("AssignedVariantId");

                    b.HasIndex("VariantId");

                    b.HasIndex("UserId", "VariantId")
                        .IsUnique();

                    b.ToTable("AssignedVariants");
                });

            modelBuilder.Entity("LMS.EntityСontext.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LMS.EntityСontext.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("GroupId");

                    b.HasIndex("Name", "Year")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("LMS.EntityСontext.LaboratoryWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("MaxMark")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("LaboratoryWorks");
                });

            modelBuilder.Entity("LMS.EntityСontext.RepoTemplate", b =>
                {
                    b.Property<int>("RepoTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RepoTemplateId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RepoTemplateId");

                    b.ToTable("RepoTemplate");
                });

            modelBuilder.Entity("LMS.EntityСontext.RepositoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultBranch")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Repos");
                });

            modelBuilder.Entity("LMS.EntityСontext.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<int>("RoleName")
                        .HasColumnType("integer");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("LMS.EntityСontext.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GitUsername")
                        .HasColumnType("text");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("PwHash")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GitUsername")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LMS.EntityСontext.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserRoleId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("LMS.EntityСontext.Variant", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VariantId"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("LaboratoryWorkId")
                        .HasColumnType("integer");

                    b.Property<int?>("RepoTemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("VariantNumber")
                        .HasColumnType("integer");

                    b.HasKey("VariantId");

                    b.HasIndex("LaboratoryWorkId");

                    b.HasIndex("RepoTemplateId");

                    b.HasIndex("VariantNumber", "LaboratoryWorkId")
                        .IsUnique();

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("LMS.EntityСontext.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.EntityСontext.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMS.EntityContext.ChatMessages", b =>
                {
                    b.HasOne("LMS.EntityСontext.AssignedVariant", "Variant")
                        .WithMany("HistoryMessages")
                        .HasForeignKey("AssignedVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.EntityСontext.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("LMS.EntityСontext.AssignedVariant", b =>
                {
                    b.HasOne("LMS.EntityСontext.User", "User")
                        .WithMany("AssignedVariants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.EntityСontext.Variant", "Variant")
                        .WithMany("AssignedVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("LMS.EntityСontext.Course", b =>
                {
                    b.HasOne("LMS.EntityСontext.User", "User")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.EntityСontext.LaboratoryWork", b =>
                {
                    b.HasOne("LMS.EntityСontext.Course", "Course")
                        .WithMany("LaboratoryWorks")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.EntityСontext.User", "User")
                        .WithMany("LaboratoryWorks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.EntityСontext.RepositoryEntity", b =>
                {
                    b.HasOne("LMS.EntityСontext.User", "User")
                        .WithMany("Repositories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.EntityСontext.User", b =>
                {
                    b.HasOne("LMS.EntityСontext.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("LMS.EntityСontext.UserRole", b =>
                {
                    b.HasOne("LMS.EntityСontext.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.EntityСontext.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMS.EntityСontext.Variant", b =>
                {
                    b.HasOne("LMS.EntityСontext.LaboratoryWork", "LaboratoryWork")
                        .WithMany("Variants")
                        .HasForeignKey("LaboratoryWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMS.EntityСontext.RepoTemplate", "AttachedRepo")
                        .WithMany()
                        .HasForeignKey("RepoTemplateId");

                    b.Navigation("AttachedRepo");

                    b.Navigation("LaboratoryWork");
                });

            modelBuilder.Entity("LMS.EntityСontext.AssignedVariant", b =>
                {
                    b.Navigation("HistoryMessages");
                });

            modelBuilder.Entity("LMS.EntityСontext.Course", b =>
                {
                    b.Navigation("LaboratoryWorks");
                });

            modelBuilder.Entity("LMS.EntityСontext.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS.EntityСontext.LaboratoryWork", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("LMS.EntityСontext.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LMS.EntityСontext.User", b =>
                {
                    b.Navigation("AssignedVariants");

                    b.Navigation("CreatedCourses");

                    b.Navigation("LaboratoryWorks");

                    b.Navigation("Repositories");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LMS.EntityСontext.Variant", b =>
                {
                    b.Navigation("AssignedVariants");
                });
#pragma warning restore 612, 618
        }
    }
}
